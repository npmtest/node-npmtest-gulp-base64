{"/home/travis/build/npmtest/node-npmtest-gulp-base64/test.js":"/* istanbul instrument in package npmtest_gulp_base64 */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - init-before\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - init-after\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - init-after\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - init-after\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-gulp-base64/lib.npmtest_gulp_base64.js":"/* istanbul instrument in package npmtest_gulp_base64 */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - init-before\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_gulp_base64 = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_gulp_base64 = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-gulp-base64/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-gulp-base64 && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_gulp_base64 */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - init-before\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_gulp_base64\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // init-after\n    // run browser js-env code - init-after\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - init-after\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_gulp_base64.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_gulp_base64.rollup.js'] =\n            local.assetsDict['/assets.npmtest_gulp_base64.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_gulp_base64.__dirname + '/lib.npmtest_gulp_base64.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-gulp-base64/node_modules/gulp-base64/index.js":"'use strict';\nvar through = require('through2');\nvar encode = require('./lib/encode');\n\nmodule.exports = function (opts) {\n\n    function rebase(file, encoding, callback) {\n        var self = this;\n\n        encode.stylesheet(file, opts, function (err, src) {\n            if (err) {\n                console.error(err);\n            }\n            file.contents = new Buffer(src);\n\n            self.push(file);\n            callback();\n        });\n\n    }\n\n    return through.obj(rebase);\n};\n\n","/home/travis/build/npmtest/node-npmtest-gulp-base64/node_modules/gulp-base64/lib/encode.js":"/*\n * Grunt Image Embed\n * https://github.com/ehynds/grunt-image-embed\n *\n * Copyright (c) 2012 Eric Hynds\n * Licensed under the MIT license.\n */\n\n// Node libs\nvar fs = require(\"fs\");\nvar path = require(\"path\");\nvar mime = require(\"mime\");\n\nvar extend = require(\"extend\");\nvar async = require(\"async\");\n\n// Internal Libs\nvar fetch = require(\"./fetch\");\n\n// Cache regex's\nvar rImages = /([\\s\\S]*?)(url\\(([^)]+)\\))(?!\\s*[;,]?\\s*\\/\\*\\s*base64:skip\\s*\\*\\/)|([\\s\\S]+)/img;\nvar rExternal = /^(http|https|\\/\\/)/;\nvar rSchemeless = /^\\/\\//;\nvar rData = /^data:/;\nvar rQuotes = /['\"]/g;\nvar rParams = /([?#].*)$/g;\n\n// Grunt export wrapper\nmodule.exports = (function () {\n  \"use strict\";\n\n  var exports = {};\n\n  /**\n   * Takes a CSS file as input, goes through it line by line, and base64\n   * encodes any images it finds.\n   *\n   * @param srcFile Relative or absolute path to a source stylesheet file.\n   * @param opts Options object\n   * @param done Function to call once encoding has finished.\n   */\n  exports.stylesheet = function(file, opts, done) {\n    opts = opts || {};\n\n    // Cache of already converted images\n    var cache = {};\n\n    // Shift args if no options object is specified\n    if(typeof opts === \"function\") {\n      done = opts;\n      opts = {};\n    }\n\n    var deleteAfterEncoding = opts.deleteAfterEncoding;\n    var src = file.contents.toString();\n    var result = \"\";\n    var match, img, line, tasks, group;\n\n    async.whilst(function() {\n      group = rImages.exec(src);\n      return group != null;\n    },\n    function(complete) {\n      // if there is another url to be processed, then:\n      //    group[1] will hold everything up to the url declaration\n      //    group[2] will hold the complete url declaration (useful if no encoding will take place)\n      //    group[3] will hold the contents of the url declaration\n      //    group[4] will be undefined\n      // if there is no other url to be processed, then group[1-3] will be undefined\n      //    group[4] will hold the entire string\n\n      // console.log(group[2]);\n\n      if(group[4] == null) {\n        result += group[1];\n\n        var rawUrl = group[3].trim();\n        img = rawUrl\n          .replace(rQuotes, \"\")\n          .replace(rParams, \"\"); // remove query string/hash parmams in the filename, like foo.png?bar or foo.png#bar\n\n        var test = true;\n        if (opts.extensions) { //test for extensions if it provided\n          var imgExt = img.split('.').pop();\n          test = opts.extensions.some(function (ext) {\n            return (ext instanceof RegExp) ? ext.test(rawUrl) : (ext === imgExt);\n          });\n        }\n        if (test && opts.exclude) { //test for extensions to exclude if it provided\n          test = !opts.exclude.some(function (pattern) {\n            return (pattern instanceof RegExp) ? pattern.test(rawUrl) : (rawUrl.indexOf(pattern) > -1);\n          });\n        }\n        if (!test) {\n          if (opts.debug) {\n            console.log(img + ' skipped by extension or exclude filters');\n          }\n          result += group[2];\n          return complete();\n        }\n        // see if this img was already processed before...\n        if(cache[img]) {\n          // grunt.log.error(\"The image \" + img + \" has already been encoded elsewhere in your stylesheet. I'm going to do it again, but it's going to make your stylesheet a lot larger than it needs to be.\");\n          result = result += cache[img];\n          complete();\n        } else {\n          // process it and put it into the cache\n          var loc = img,\n              is_local_file = !rData.test(img) && !rExternal.test(img);\n\n          // Resolve the image path relative to the CSS file\n          if (is_local_file) {\n            // local file system.. fix up the path\n            // loc = path.join(path.dirname(file.path), img);\n\n            loc = opts.baseDir ? path.join(opts.baseDir, img) :\n                path.join(path.dirname(file.path), img);\n\n            // If that didn't work, try finding the image relative to\n            // the current file instead.\n            if(!fs.existsSync(loc)) {\n              if (opts.debug) {\n                console.log('in ' + loc + ' file doesn\\'t exist');\n              }\n              loc = path.join(file.cwd, img);\n            }\n          }\n\n          // Test for scheme less URLs => \"//example.com/image.png\"\n          if (!is_local_file && rSchemeless.test(loc)) {\n            loc = 'http:' + loc;\n          }\n\n          exports.image(loc, opts, function (err, resp, cacheable) {\n            if (err == null) {\n              var url = \"url(\" + resp + \")\";\n              result += url;\n\n              if(cacheable !== false) {\n                cache[img] = url;\n              }\n\n              if(deleteAfterEncoding && is_local_file) {\n                // grunt.log.writeln(\"deleting \" + loc);\n                fs.unlinkSync(loc);\n              }\n            } else {\n              result += group[2];\n            }\n\n            complete();\n          });\n        }\n      } else {\n        result += group[4];\n        complete();\n      }\n    },\n    function() {\n      done(null, result);\n    });\n  };\n\n\n  /**\n   * Takes an image (absolute path or remote) and base64 encodes it.\n   *\n   * @param img Absolute, resolved path to an image\n   * @param opts Options object\n   * @return A data URI string (mime type, base64 img, etc.) that a browser can interpret as an image\n   */\n  exports.image = function(img, opts, done) {\n\n    // Shift args\n    if(typeof opts === \"function\") {\n      done = opts;\n      opts = {};\n    }\n\n    // Set default, helper-specific options\n    opts = extend({\n      maxImageSize: 32768\n    }, opts);\n\n    var complete = function(err, encoded, cacheable) {\n      // Too long?\n      if(cacheable && encoded && opts.maxImageSize && encoded.length > opts.maxImageSize) {\n        err = \"Skipping \" + img + \" (greater than \" + opts.maxImageSize + \" bytes)\";\n      }\n\n      // Return the original source if an error occurred\n      if(err) {\n        // grunt.log.error(err);\n        done(err, img, false);\n\n        // Otherwise cache the processed image and return it\n      } else {\n        done(null, encoded, cacheable);\n      }\n    };\n\n    // Already base64 encoded?\n    if(rData.test(img)) {\n      complete(null, img, false);\n\n      // External URL?\n    } else if(rExternal.test(img)) {\n      // grunt.log.writeln(\"Encoding file: \" + img);\n      fetch.image(img, function(err, src, cacheable) {\n        var encoded, type;\n        if (err == null) {\n          type = mime.lookup(img);\n          encoded = exports.getDataURI(type, src);\n        }\n        complete(err, encoded, cacheable);\n      } );\n\n      // Local file?\n    } else {\n      // Does the image actually exist?\n      if(!fs.existsSync(img) || !fs.lstatSync(img).isFile()) {\n        // grunt.fail.warn(\"File \" + img + \" does not exist\");\n        if (opts.debug) {\n          console.warn(\"File \" + img + \" does not exist\");\n        }\n        complete(true, img, false);\n        return;\n      }\n\n      // grunt.log.writeln(\"Encoding file: \" + img);\n      if (opts.debug) {\n        console.info(\"Encoding file: \" + img);\n      }\n\n      // Read the file in and convert it.\n      var src = fs.readFileSync(img);\n      var type = mime.lookup(img);\n      var encoded = exports.getDataURI(type, src);\n      complete(null, encoded, true);\n    }\n  };\n\n\n  /**\n   * Base64 encodes an image and builds the data URI string\n   *\n   * @param mimeType Mime type of the image\n   * @param img The source image\n   * @return Data URI string\n   */\n  exports.getDataURI = function(mimeType, img) {\n    var ret = \"data:\";\n    ret += mimeType;\n    ret += \";base64,\";\n    ret += img.toString(\"base64\");\n    return ret;\n  };\n\n  return exports;\n})();\n","/home/travis/build/npmtest/node-npmtest-gulp-base64/node_modules/gulp-base64/lib/fetch.js":"/*\n * Grunt Image Embed\n * https://github.com/ehynds/grunt-image-embed\n *\n * Copyright (c) 2012 Eric Hynds\n * Licensed under the MIT license.\n */\n\n// Node libs\nvar request = require(\"request\");\nvar stream = require(\"stream\");\nvar buffers = require(\"buffers\");\n\n// Grunt export wrapper\nmodule.exports = (function () {\n    \"use strict\";\n\n    var exports = {};\n\n    /**\n     * Fetches a remote image.\n     *\n     * @param img Remote path, like http://url.to/an/image.png\n     * @param done Function to call once done\n     */\n    exports.image = function (url, done) {\n        var resultBuffer;\n        var buffList = buffers();\n        var imageStream = new stream.Stream();\n\n        imageStream.writable = true;\n        imageStream.write = function (data) { buffList.push(new Buffer(data)); };\n        imageStream.end = function () { resultBuffer = buffList.toBuffer(); };\n\n        request(url, function (error, response/*, body*/) {\n            if (error) {\n                done(\"Unable to get \" + url + \". Error: \" + error.message);\n                return;\n            }\n\n            // Bail if we get anything other than 200\n            if (response.statusCode !== 200) {\n                done(\"Unable to get \" + url + \" because the URL did not return an image. Status code \" + response.statusCode + \" received\");\n                return;\n            }\n\n            done(null, resultBuffer, true);\n        }).pipe(imageStream);\n    };\n\n    return exports;\n})();"}